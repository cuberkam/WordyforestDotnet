@using WordyforestDotnet.Models.Entities
@{
    ViewData["Title"] = "Home Page";
}
@model Vocabulary?

<div id="Vocabulary" class="d-flex justify-content-between align-items-center">
    <div>

        <div class="dropdown">
            <button class="dropdown-btn">Choose Vocabularies List</button>
            <div class="dropdown-content">
                <div class="dropdown-header">DEFAULT VOCABULARIES LISTS</div>
                <button type="button" value="-1" class="dropdown-item" onclick="selectItem(this)">Default Words List</button>
                @if (ViewBag.publicLists != null)
                {
                    @foreach (var publicLists in ViewBag.publicLists)
                    {
                        <button type="button" value="@publicLists.Id" class="dropdown-item" onclick="selectItem(this)">@publicLists.Name</button>
                    }
                }

                <div class="dropdown-header">MY VOCABULARIES LISTS</div>
                @if (ViewBag.userLists != null)
                {
                    @foreach (var userLists in ViewBag.userLists)
                    {
                        <button type="button" value="@userLists.Id" class="dropdown-item" onclick="selectItem(this)">@userLists.Name</button>
                    }
                }

                <div class="dropdown-header">SUBSCRIBED VOCABULARIES LISTS</div>
                @if (ViewBag.subscribetedLists != null)
                {
                    @foreach (var subscribetedLists in ViewBag.subscribetedLists)
                    {
                        <button type="button" value="@subscribetedLists.Id" class="dropdown-item" onclick="selectItem(this)">@subscribetedLists.Name</button>
                    }
                }
            </div>
        </div>

    </div>
    <div>
        <button id="btn-get-random" class="btn btn-primary" value="-1">Next Vocabulary</button>
    </div>
</div><br />

<div id="vocabulary-container">
    <partial name="_NextVocabulary" model="Model" />
</div>


 @section scripts { 
     <script>
        // Dropdown Menu
        function selectItem(button) {
            const selectedText = button.textContent;
            const selectedValue = button.value;

            document.getElementById("btn-get-random").value = selectedValue;
            document.querySelector(".dropdown-btn").textContent = selectedText;
        }
         // Vocabulary
         document.getElementById('btn-get-random').addEventListener('click', async (event) => {
             try {
                 const buttonValue = event.target.value;
                 const response = await fetch('/home/nextvocabulary/'+buttonValue);
                 if (!response.ok) {
                    throw new Error("no response from the server");
                 } 

                 const html = await response.text(); 
                 document.getElementById('vocabulary-container').innerHTML = html; 

             } catch (error) { 
                 console.error(error);
                 alert('an error occurred.');
             } 
         });
     </script> 
 } 